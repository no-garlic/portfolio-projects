{
    "c++11": {
        "01_move_semantics": "move semantics (std::move, std::forward)",
        "02_rvalue_references": "rvalue references (T&& for move semantics and perfect forwarding)",
        "03_smart_pointers": "smart pointers (std::unique_ptr, std::shared_ptr, std::weak_ptr)",
        "04_variadic_templates": "variadic templates (template<typename... Args>)",
        "05_auto": "auto type deduction (auto x = 42;)",
        "06_decltype": "decltype (decltype(x) y;)",
        "07_lambdas": "lambda expressions ([](int x) { return x * x; })",
        "08_range_for": "range-based for loops (for (int x : vec))",
        "09_using_alias": "type aliases (using) (alternative to typedef)",
        "10_nullptr": "nullptr (replaces NULL)",
        "11_override_final": "override & final (override, final)",
        "12_default_delete": "explicitly defaulted/deleted functions (= default;, = delete;)",
        "13_enum_class": "strongly typed enums (enum class Color { Red, Green, Blue };)",
        "14_constexpr": "constant expressions (constexpr)",
        "15_threading": "thread support library (<thread>, <mutex>, <future>)",
        "16_static_assert": "static assertions (static_assert)",
        "17_unordered_map_set": "unordered containers (std::unordered_map, std::unordered_set)",
        "18_regex_string": "new string & regex support (std::to_string, std::stoi, <regex>)"
    },
    "c++14": {
        "01_generic_lambdas": "generic lambda expressions (auto x = [](auto a, auto b) { return a + b; };)",
        "02_return_deduction": "return type deduction for functions (auto func() { return 42; })",
        "03_variable_templates": "variable templates (template<typename T> constexpr T pi = T(3.1415926535897932385);)",
        "04_relaxed_constexpr": "relaxed constexpr (allowing loops and conditionals)",
        "05_digit_separator": "digit separators (1'000'000)",
        "06_make_unique": "std::make_unique (better memory management than new)",
        "07_remove_auto_ptr": "deprecation of std::auto_ptr (encouraging std::unique_ptr)",
        "08_integral_constant": "extended std::integral_constant for type traits",
        "09_shared_mutex": "shared mutex (std::shared_timed_mutex)"
    },
    "c++17": {
        "01_structured_bindings": "structured bindings (auto [x, y] = myPair;)",
        "02_if_constexpr": "if constexpr (compile-time branching)",
        "03_inline_variables": "inline variables (inline constexpr int value = 10;)",
        "04_fold_expressions": "fold expressions ((args + ... + 0))",
        "05_lambda_move": "lambda captures by move ([x = std::move(y)] {})",
        "06_if_init": "selection statements with init (if (init; condition))",
        "07_constexpr_upgrade": "more powerful constexpr (allowing more computations at compile-time)",
        "08_filesystem": "filesystem library (std::filesystem)",
        "09_parallel_algorithms": "parallel algorithms (std::execution)",
        "10_std_optional": "std::optional (for handling optional values)",
        "11_std_variant": "std::variant (type-safe alternative to union)",
        "12_std_any": "std::any (type-erased value container)",
        "13_std_invoke": "std::invoke (universal function invocation)",
        "14_std_string_view": "std::string_view (non-owning view of a string)",
        "15_shared_mutex_upgrade": "improved std::shared_mutex for read-write locks"
    },
    "c++20": {
        "01_concepts": "concepts (requires clauses for templated constraints)",
        "02_coroutines": "coroutines (co_await, co_yield, co_return)",
        "03_modules": "modules (import my_module;)",
        "04_spaceship_operator": "three-way comparison (<=>, 'spaceship operator')",
        "05_ranges": "ranges library (std::ranges::view)",
        "06_constexpr_upgrade_20": "constexpr improvements (supporting std::vector, std::string)",
        "07_lambda_templates": "lambda improvements (template in lambdas)",
        "08_aggregate_init": "default member initializers in aggregates",
        "09_designated_init": "designated initializers (Point p = {.x = 1, .y = 2};)",
        "10_std_span": "std::span (non-owning contiguous view of an array)",
        "11_std_bit_cast": "std::bit_cast (type punning without UB)",
        "12_chrono_calendar": "calendar and time zone support (std::chrono)"
    }
}
